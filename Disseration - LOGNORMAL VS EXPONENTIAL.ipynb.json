{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import random \n",
    "import statistics \n",
    "import timeit\n",
    "import math\n",
    "\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def simulation_sensitivity_lognormal(N, arrival_rate, gamma, termination, servicerate):\n",
    "    # Setting paramters\n",
    "    TNOW = 0\n",
    "    TotalP = 0\n",
    "    # Average queue \n",
    "    Queue = 0 \n",
    "    free_servers = []\n",
    "    # Abandonment rate\n",
    "    Abandon = 0\n",
    "    Q_num = 0\n",
    "    N_served = 0\n",
    "    # PLotting Parameters for experiment \n",
    "    Waiting_number_Served = 0\n",
    "    Waiting_number_Left = 0\n",
    "    Waiting_Time_Left = 0\n",
    "    Waiting_Time_Served = 0\n",
    "    \n",
    "    Total = 0\n",
    "    AreaQ = 0\n",
    "    AreaP_ = 0\n",
    "    AreaP = 0\n",
    "    \n",
    "    # Waiting time performance measure \n",
    "    Arrival_times = {}\n",
    "    \n",
    "    # Setting up the event Calendar \n",
    "    col_name = [\"Arrivals\", \"Termination\"]\n",
    "\n",
    "    for i in range(0, N): \n",
    "        col_name += [\"Server_\"+str(i)]\n",
    "        free_servers += [\"Server_\"+str(i)]        \n",
    "    \n",
    "    # Initializing the event calendar \n",
    "    event_calendar = { c : termination+1 for c in col_name}\n",
    "    event_calendar[\"Arrivals\"] = random.expovariate(arrival_rate)\n",
    "    event_calendar[\"Termination\"] = termination\n",
    "\n",
    " \n",
    "    # Initialize Record keeping of utilization rates \n",
    "    Total_Utilization =  { s : 0 for s in free_servers}\n",
    "    \n",
    "    while TNOW < termination:     \n",
    "        \n",
    "        TLast = TNOW\n",
    "        Next_Event = min(event_calendar.keys(), key = (lambda k: event_calendar[k]))\n",
    "        TNOW = event_calendar[Next_Event]\n",
    "        \n",
    "        \n",
    "        if TNOW >= termination: \n",
    "            AreaQ += Queue*(termination - TLast)\n",
    "            AreaP_ += (TotalP)*(termination - TLast)\n",
    "            if TotalP >  0:\n",
    "                AreaP += (Queue/TotalP)*(termination - TLast)\n",
    "\n",
    "        else:\n",
    "            AreaQ += Queue*(TNOW - TLast)\n",
    "            AreaP_ += (TotalP)*(TNOW - TLast)\n",
    "            if TotalP >  0:\n",
    "                AreaP += (Queue/TotalP)*(TNOW - TLast)\n",
    "        \n",
    "        \n",
    "        if Next_Event == 'Arrivals':  \n",
    "            event_calendar[\"Arrivals\"] += random.expovariate(arrival_rate)\n",
    "            # Assign a queue to check if servers are free\n",
    "            TotalP += 1\n",
    "            Total +=1\n",
    "            if free_servers == []:\n",
    "                Queue += 1\n",
    "                Q_num += 1 \n",
    "                Arrival_times[str(Q_num)] = TNOW\n",
    "                event_calendar[\"Departure_\" + str(Q_num)] = TNOW + random.expovariate(gamma)\n",
    "            else:\n",
    "                s = random.choice(free_servers)\n",
    "                N_served +=1\n",
    "                # Schedule Service completion and make the server busy\n",
    "                free_servers.remove(s)\n",
    "                ## edit this\n",
    "                m = 1/servicerate[s]\n",
    "                v =  1/(servicerate[s]**2)\n",
    "                event_calendar[s] = TNOW + np.random.lognormal(np.log((m**2)/np.sqrt((m**2)+v)),np.sqrt(np.log(1+(v/(m**2)))))\n",
    "               \n",
    "                # Only schedule the next service if TNOW < termination\n",
    "                if TNOW < termination:\n",
    "                    if event_calendar[s] < termination:\n",
    "                        Total_Utilization[s] += event_calendar[s] - TNOW      \n",
    "                    else:\n",
    "                        Total_Utilization[s] += termination - TNOW \n",
    "              \n",
    "        elif (Next_Event).startswith(\"Server\") == True:\n",
    "            ## Reset the value for the corresponding agent that is now free \n",
    "            event_calendar[Next_Event] = termination + 1 \n",
    "            free_servers.append(Next_Event)\n",
    "            TotalP -= 1\n",
    "             # Schedule the next service time once a server is available \n",
    "            if Queue > 0 and free_servers != []:\n",
    "                s = random.choice(free_servers)\n",
    "                N_served +=1\n",
    "                Queue -= 1 \n",
    "                free_servers.remove(s)\n",
    "                ### What to do with the parameter check logic is correct here ?\n",
    "                m = 1/servicerate[s]\n",
    "                v =  1/(servicerate[s]**2)\n",
    "                event_calendar[s] = TNOW + np.random.lognormal(np.log((m**2)/np.sqrt((m**2)+v)),np.sqrt(np.log(1+(v/(m**2)))))\n",
    "                    \n",
    "                # First come first serve basis\n",
    "                del event_calendar[list(event_calendar)[N+2]]\n",
    "\n",
    "                if TNOW < termination:\n",
    "                    Waiting_Time_Served += TNOW - Arrival_times[list(Arrival_times)[0]]\n",
    "                    if event_calendar[s] < termination:\n",
    "                        Total_Utilization[s] += event_calendar[s] - TNOW   \n",
    "                    else:\n",
    "                        Total_Utilization[s] += termination - TNOW \n",
    "                else:\n",
    "                    Waiting_Time_Served +=  termination - Arrival_times[list(Arrival_times)[0]]\n",
    "                            \n",
    "                            \n",
    "                ## Remove entry,no need to record NEED TPO APPEND APPLY THE SAME \n",
    "                Waiting_number_Served += 1 \n",
    "                del Arrival_times[list(Arrival_times)[0]]\n",
    "                \n",
    "                    \n",
    "        if (Next_Event).startswith(\"Departure\") == True:\n",
    "            del event_calendar[Next_Event]\n",
    "            Abandon += 1 \n",
    "            Queue -= 1\n",
    "            TotalP -= 1\n",
    "            #Remove the Arrival information and record wating time before he left\n",
    "            \n",
    "            if TNOW < termination:\n",
    "                Waiting_Time_Left += TNOW - Arrival_times[Next_Event[Next_Event.index(\"_\")+1:]]\n",
    "            else:\n",
    "                Waiting_Time_Left +=  termination - Arrival_times[Next_Event[Next_Event.index(\"_\")+1:]]          \n",
    "            ## Remove entry,no need to record NEED TPO APPEND APPLY THE SAME \n",
    "            Waiting_number_Left += 1 \n",
    "            del Arrival_times[Next_Event[Next_Event.index(\"_\")+1:]]\n",
    "            \n",
    "        val = 0\n",
    "        for k in Total_Utilization:\n",
    "            val +=  Total_Utilization[k]\n",
    "        avg_u = val/len(Total_Utilization)/termination\n",
    "    return  Abandon, Q_num, Waiting_Time_Left/Abandon, Waiting_Time_Served/N_served, N_served,  avg_u, AreaQ/termination, AreaP/termination, AreaP_/termination, Total"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def simulation_sensitivity(N, arrival_rate, gamma, termination, servicerate):\n",
    "    # Setting paramters\n",
    "    TNOW = 0\n",
    "    TotalP = 0\n",
    "    Total = 0\n",
    "    AreaQ = 0\n",
    "    AreaP_ = 0\n",
    "    AreaP = 0\n",
    "    # Average queue \n",
    "    Queue = 0 \n",
    "    free_servers = []\n",
    "    # Abandonment rate\n",
    "    Abandon = 0\n",
    "    Q_num = 0\n",
    "    N_served = 0\n",
    "    # PLotting Parameters for experiment \n",
    "    Waiting_number_Served = 0\n",
    "    Waiting_number_Left = 0\n",
    "    Waiting_Time_Left = 0\n",
    "    Waiting_Time_Served = 0\n",
    "    \n",
    "    # Waiting time performance measure \n",
    "    Arrival_times = {}\n",
    "    \n",
    "    # Setting up the event Calendar \n",
    "    col_name = [\"Arrivals\", \"Termination\"]\n",
    "\n",
    "    for i in range(0, N): \n",
    "        col_name += [\"Server_\"+str(i)]\n",
    "        free_servers += [\"Server_\"+str(i)]        \n",
    "    \n",
    "    # Initializing the event calendar \n",
    "    event_calendar = { c : termination+1 for c in col_name}\n",
    "    event_calendar[\"Arrivals\"] = random.expovariate(arrival_rate)\n",
    "    event_calendar[\"Termination\"] = termination\n",
    "\n",
    " \n",
    "    # Initialize Record keeping of utilization rates \n",
    "    Total_Utilization =  { s : 0 for s in free_servers}\n",
    "    \n",
    "    while TNOW < termination:     \n",
    "        \n",
    "        TLast = TNOW\n",
    "        Next_Event = min(event_calendar.keys(), key = (lambda k: event_calendar[k]))\n",
    "        TNOW = event_calendar[Next_Event]\n",
    "        \n",
    "            \n",
    "        if TNOW >= termination: \n",
    "            AreaQ += Queue*(termination - TLast)\n",
    "            AreaP_ += (TotalP)*(termination - TLast)\n",
    "            if TotalP >  0:\n",
    "                AreaP += (Queue/TotalP)*(termination - TLast)\n",
    "\n",
    "        else:\n",
    "            AreaQ += Queue*(TNOW - TLast)\n",
    "            AreaP_ += (TotalP)*(TNOW - TLast)\n",
    "            if TotalP >  0:\n",
    "                AreaP += (Queue/TotalP)*(TNOW - TLast)\n",
    "        \n",
    "        if Next_Event == 'Arrivals':  \n",
    "            Total +=1\n",
    "            event_calendar[\"Arrivals\"] += random.expovariate(arrival_rate)\n",
    "            # Assign a queue to check if servers are free\n",
    "            TotalP += 1\n",
    "            if free_servers == []:\n",
    "                Queue += 1\n",
    "                Q_num += 1 \n",
    "                Arrival_times[str(Q_num)] = TNOW\n",
    "                event_calendar[\"Departure_\" + str(Q_num)] = TNOW + random.expovariate(gamma)\n",
    "            else:\n",
    "                s = random.choice(free_servers)\n",
    "                N_served +=1\n",
    "                # Schedule Service completion and make the server busy\n",
    "                free_servers.remove(s)\n",
    "                event_calendar[s] = TNOW + random.expovariate(servicerate[s])\n",
    "                # Only schedule the next service if TNOW < termination\n",
    "                if TNOW < termination:\n",
    "                    if event_calendar[s] < termination:\n",
    "                        Total_Utilization[s] += event_calendar[s] - TNOW      \n",
    "                    else:\n",
    "                        Total_Utilization[s] += termination - TNOW \n",
    "              \n",
    "        elif (Next_Event).startswith(\"Server\") == True:\n",
    "            ## Reset the value for the corresponding agent that is now free \n",
    "            \n",
    "            TotalP -= 1\n",
    "            event_calendar[Next_Event] = termination + 1 \n",
    "            free_servers.append(Next_Event)\n",
    "             # Schedule the next service time once a server is available \n",
    "            if Queue > 0 and free_servers != []:\n",
    "                s = random.choice(free_servers)\n",
    "                Queue -= 1 \n",
    "                N_served +=1\n",
    "                free_servers.remove(s)\n",
    "                event_calendar[s] = TNOW + random.expovariate(servicerate[s])\n",
    "                   \n",
    "                # First come first serve basis\n",
    "                del event_calendar[list(event_calendar)[N+2]]\n",
    "\n",
    "                if TNOW < termination:\n",
    "                    Waiting_Time_Served += TNOW - Arrival_times[list(Arrival_times)[0]]\n",
    "                    \n",
    "                    if event_calendar[s] < termination:\n",
    "                        Total_Utilization[s] += event_calendar[s] - TNOW   \n",
    "                    else:\n",
    "                        Total_Utilization[s] += termination - TNOW  \n",
    "                else:\n",
    "                    Waiting_Time_Served +=  termination - Arrival_times[list(Arrival_times)[0]]\n",
    "                            \n",
    "                            \n",
    "                ## Remove entry,no need to record NEED TPO APPEND APPLY THE SAME \n",
    "                Waiting_number_Served += 1 \n",
    "                del Arrival_times[list(Arrival_times)[0]]\n",
    "                \n",
    "                    \n",
    "        if (Next_Event).startswith(\"Departure\") == True:\n",
    "            Abandon += 1 \n",
    "            Queue -= 1\n",
    "            TotalP -= 1\n",
    "            #Remove the Arrival information and record wating time before he left\n",
    "            if TNOW < termination:\n",
    "                Waiting_Time_Left += TNOW - Arrival_times[Next_Event[Next_Event.index(\"_\")+1:]]\n",
    "            else:\n",
    "                Waiting_Time_Left += termination - Arrival_times[Next_Event[Next_Event.index(\"_\")+1:]]          \n",
    "            ## Remove entry,no need to record NEED TPO APPEND APPLY THE SAME \n",
    "            Waiting_number_Left += 1 \n",
    "            del event_calendar[Next_Event]\n",
    "            del Arrival_times[Next_Event[Next_Event.index(\"_\")+1:]]\n",
    "        \n",
    "        \n",
    "        val = 0\n",
    "        for k in Total_Utilization:\n",
    "            val +=  Total_Utilization[k]\n",
    "        avg_u = val/len(Total_Utilization)/termination\n",
    "        \n",
    "### Avg waiting time per person \n",
    "    return Abandon, Q_num, Waiting_Time_Left/Abandon, Waiting_Time_Served/N_served, N_served,  avg_u, AreaQ/termination, AreaP/termination, AreaP_/termination, Total"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n",
      "6\n",
      "7\n",
      "8\n",
      "9\n",
      "10\n",
      "11\n",
      "12\n",
      "13\n",
      "14\n",
      "15\n",
      "16\n",
      "17\n",
      "18\n",
      "19\n"
     ]
    }
   ],
   "source": [
    "matrix = pd.DataFrame ()\n",
    "matrix_r = pd.DataFrame ()\n",
    "new_entry = {}\n",
    "l=[]\n",
    "l_r =[]\n",
    "free_servers = []\n",
    "for i in range(0, 100): \n",
    "    free_servers += [\"Server_\"+str(i)]  \n",
    "\n",
    "for i in range(0,20):\n",
    "    servicerate = {}\n",
    "    for server in free_servers:\n",
    "        servicerate.update({ server : random.uniform(0.4,1.6)})\n",
    "        \n",
    "    x = simulation_sensitivity_lognormal(100, 100, 0.5, 60000, servicerate)   \n",
    "    l.append(x)\n",
    "    new_entry.update( Served = x[4])\n",
    "    new_entry.update( Abandoned = x[0])\n",
    "    new_entry.update( Waiting = x[1])\n",
    "    new_entry.update( Waiting_Time_S = x[3])\n",
    "    new_entry.update( Waiting_Time_A = x[2])\n",
    "    new_entry.update( Utilization = x[5])\n",
    "    new_entry.update( Avg_Queue = x[6])\n",
    "    new_entry.update( Queue_Fraction = x[7])\n",
    "    new_entry.update( Avg_People = x[8])\n",
    "    new_entry.update( Porportion_Waiting = x[1] /x[9])\n",
    "    new_entry.update( Porportion_Abandonned = x[0] /x[9])\n",
    "    matrix = matrix.append(new_entry, ignore_index = True)\n",
    "    \n",
    "    y = simulation_sensitivity(100,100, 0.5, 60000, servicerate)\n",
    "    l_r.append(y)\n",
    "    new_entry.update( Served = y[4])\n",
    "    new_entry.update( Abandoned = y[0])\n",
    "    new_entry.update( Waiting = y[1])\n",
    "    new_entry.update( Waiting_Time_S = y[3])\n",
    "    new_entry.update( Waiting_Time_A = y[2])\n",
    "    new_entry.update( Utilization = y[5])\n",
    "    new_entry.update( Avg_Queue = y[6])\n",
    "    new_entry.update( Queue_Fraction = y[7])\n",
    "    new_entry.update( Avg_People = y[8])\n",
    "    new_entry.update( Porportion_Waiting = y[1] /y[9])\n",
    "    new_entry.update( Porportion_Abandonned = y[0] /y[9])\n",
    "    matrix_r = matrix_r.append(new_entry, ignore_index = True)\n",
    "    \n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Abandoned</th>\n",
       "      <th>Avg_People</th>\n",
       "      <th>Avg_Queue</th>\n",
       "      <th>Porportion_Abandonned</th>\n",
       "      <th>Porportion_Waiting</th>\n",
       "      <th>Queue_Fraction</th>\n",
       "      <th>Served</th>\n",
       "      <th>Utilization</th>\n",
       "      <th>Waiting</th>\n",
       "      <th>Waiting_Time_A</th>\n",
       "      <th>Waiting_Time_S</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>200473.0</td>\n",
       "      <td>103.590842</td>\n",
       "      <td>6.684600</td>\n",
       "      <td>0.033405</td>\n",
       "      <td>0.605023</td>\n",
       "      <td>0.056967</td>\n",
       "      <td>5800878.0</td>\n",
       "      <td>0.969062</td>\n",
       "      <td>3630958.0</td>\n",
       "      <td>0.088570</td>\n",
       "      <td>0.066080</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>226920.0</td>\n",
       "      <td>104.925388</td>\n",
       "      <td>7.608573</td>\n",
       "      <td>0.037810</td>\n",
       "      <td>0.646817</td>\n",
       "      <td>0.064436</td>\n",
       "      <td>5774710.0</td>\n",
       "      <td>0.973168</td>\n",
       "      <td>3881956.0</td>\n",
       "      <td>0.093065</td>\n",
       "      <td>0.075397</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>243707.0</td>\n",
       "      <td>105.658458</td>\n",
       "      <td>8.096445</td>\n",
       "      <td>0.040641</td>\n",
       "      <td>0.670157</td>\n",
       "      <td>0.068383</td>\n",
       "      <td>5752842.0</td>\n",
       "      <td>0.975620</td>\n",
       "      <td>4018634.0</td>\n",
       "      <td>0.094898</td>\n",
       "      <td>0.080423</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>381392.0</td>\n",
       "      <td>111.533018</td>\n",
       "      <td>12.717567</td>\n",
       "      <td>0.063548</td>\n",
       "      <td>0.813777</td>\n",
       "      <td>0.104218</td>\n",
       "      <td>5620180.0</td>\n",
       "      <td>0.988155</td>\n",
       "      <td>4883966.0</td>\n",
       "      <td>0.115253</td>\n",
       "      <td>0.127948</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>112898.0</td>\n",
       "      <td>98.634248</td>\n",
       "      <td>3.773326</td>\n",
       "      <td>0.018820</td>\n",
       "      <td>0.436113</td>\n",
       "      <td>0.032952</td>\n",
       "      <td>5885866.0</td>\n",
       "      <td>0.948609</td>\n",
       "      <td>2616141.0</td>\n",
       "      <td>0.073232</td>\n",
       "      <td>0.037060</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>193066.0</td>\n",
       "      <td>103.245182</td>\n",
       "      <td>6.451085</td>\n",
       "      <td>0.032183</td>\n",
       "      <td>0.594321</td>\n",
       "      <td>0.055077</td>\n",
       "      <td>5805874.0</td>\n",
       "      <td>0.967941</td>\n",
       "      <td>3565310.0</td>\n",
       "      <td>0.087431</td>\n",
       "      <td>0.063760</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>255060.0</td>\n",
       "      <td>106.221643</td>\n",
       "      <td>8.491863</td>\n",
       "      <td>0.042518</td>\n",
       "      <td>0.687178</td>\n",
       "      <td>0.071551</td>\n",
       "      <td>5743784.0</td>\n",
       "      <td>0.977298</td>\n",
       "      <td>4122272.0</td>\n",
       "      <td>0.096304</td>\n",
       "      <td>0.084430</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>201308.0</td>\n",
       "      <td>103.667524</td>\n",
       "      <td>6.698588</td>\n",
       "      <td>0.033531</td>\n",
       "      <td>0.608254</td>\n",
       "      <td>0.057100</td>\n",
       "      <td>5802251.0</td>\n",
       "      <td>0.969689</td>\n",
       "      <td>3651696.0</td>\n",
       "      <td>0.088685</td>\n",
       "      <td>0.066192</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>269631.0</td>\n",
       "      <td>106.864151</td>\n",
       "      <td>8.985666</td>\n",
       "      <td>0.044966</td>\n",
       "      <td>0.703515</td>\n",
       "      <td>0.075430</td>\n",
       "      <td>5726720.0</td>\n",
       "      <td>0.978785</td>\n",
       "      <td>4218522.0</td>\n",
       "      <td>0.098725</td>\n",
       "      <td>0.089496</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>121287.0</td>\n",
       "      <td>99.145229</td>\n",
       "      <td>4.029018</td>\n",
       "      <td>0.020204</td>\n",
       "      <td>0.454703</td>\n",
       "      <td>0.035120</td>\n",
       "      <td>5881880.0</td>\n",
       "      <td>0.951162</td>\n",
       "      <td>2729661.0</td>\n",
       "      <td>0.074059</td>\n",
       "      <td>0.039572</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>167704.0</td>\n",
       "      <td>101.858496</td>\n",
       "      <td>5.587923</td>\n",
       "      <td>0.027956</td>\n",
       "      <td>0.548952</td>\n",
       "      <td>0.048017</td>\n",
       "      <td>5831175.0</td>\n",
       "      <td>0.962706</td>\n",
       "      <td>3293097.0</td>\n",
       "      <td>0.083116</td>\n",
       "      <td>0.055107</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>196000.0</td>\n",
       "      <td>103.374249</td>\n",
       "      <td>6.539267</td>\n",
       "      <td>0.032646</td>\n",
       "      <td>0.598098</td>\n",
       "      <td>0.055799</td>\n",
       "      <td>5807882.0</td>\n",
       "      <td>0.968350</td>\n",
       "      <td>3590908.0</td>\n",
       "      <td>0.087658</td>\n",
       "      <td>0.064598</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>202574.0</td>\n",
       "      <td>103.718219</td>\n",
       "      <td>6.752808</td>\n",
       "      <td>0.033758</td>\n",
       "      <td>0.610120</td>\n",
       "      <td>0.057570</td>\n",
       "      <td>5798236.0</td>\n",
       "      <td>0.969654</td>\n",
       "      <td>3661222.0</td>\n",
       "      <td>0.088679</td>\n",
       "      <td>0.066780</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>182283.0</td>\n",
       "      <td>102.706908</td>\n",
       "      <td>6.087973</td>\n",
       "      <td>0.030392</td>\n",
       "      <td>0.576208</td>\n",
       "      <td>0.052122</td>\n",
       "      <td>5815504.0</td>\n",
       "      <td>0.966189</td>\n",
       "      <td>3455981.0</td>\n",
       "      <td>0.085865</td>\n",
       "      <td>0.060120</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>140795.0</td>\n",
       "      <td>100.315549</td>\n",
       "      <td>4.695237</td>\n",
       "      <td>0.023477</td>\n",
       "      <td>0.495539</td>\n",
       "      <td>0.040655</td>\n",
       "      <td>5856213.0</td>\n",
       "      <td>0.956203</td>\n",
       "      <td>2971756.0</td>\n",
       "      <td>0.078205</td>\n",
       "      <td>0.046225</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>166292.0</td>\n",
       "      <td>101.828787</td>\n",
       "      <td>5.527776</td>\n",
       "      <td>0.027694</td>\n",
       "      <td>0.547950</td>\n",
       "      <td>0.047569</td>\n",
       "      <td>5838306.0</td>\n",
       "      <td>0.963010</td>\n",
       "      <td>3290221.0</td>\n",
       "      <td>0.082317</td>\n",
       "      <td>0.054464</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>180684.0</td>\n",
       "      <td>102.587567</td>\n",
       "      <td>6.008782</td>\n",
       "      <td>0.030098</td>\n",
       "      <td>0.575209</td>\n",
       "      <td>0.051582</td>\n",
       "      <td>5822574.0</td>\n",
       "      <td>0.965788</td>\n",
       "      <td>3453128.0</td>\n",
       "      <td>0.084180</td>\n",
       "      <td>0.059307</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>229985.0</td>\n",
       "      <td>105.043904</td>\n",
       "      <td>7.663642</td>\n",
       "      <td>0.038308</td>\n",
       "      <td>0.650169</td>\n",
       "      <td>0.064876</td>\n",
       "      <td>5773581.0</td>\n",
       "      <td>0.973803</td>\n",
       "      <td>3903342.0</td>\n",
       "      <td>0.092997</td>\n",
       "      <td>0.075937</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>210313.0</td>\n",
       "      <td>104.014839</td>\n",
       "      <td>6.972252</td>\n",
       "      <td>0.035052</td>\n",
       "      <td>0.618105</td>\n",
       "      <td>0.059291</td>\n",
       "      <td>5789649.0</td>\n",
       "      <td>0.970426</td>\n",
       "      <td>3708610.0</td>\n",
       "      <td>0.089837</td>\n",
       "      <td>0.068992</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>227747.0</td>\n",
       "      <td>104.938442</td>\n",
       "      <td>7.591003</td>\n",
       "      <td>0.037985</td>\n",
       "      <td>0.647772</td>\n",
       "      <td>0.064307</td>\n",
       "      <td>5767941.0</td>\n",
       "      <td>0.973474</td>\n",
       "      <td>3883840.0</td>\n",
       "      <td>0.092900</td>\n",
       "      <td>0.075296</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Abandoned  Avg_People  Avg_Queue  Porportion_Abandonned  \\\n",
       "0    200473.0  103.590842   6.684600               0.033405   \n",
       "1    226920.0  104.925388   7.608573               0.037810   \n",
       "2    243707.0  105.658458   8.096445               0.040641   \n",
       "3    381392.0  111.533018  12.717567               0.063548   \n",
       "4    112898.0   98.634248   3.773326               0.018820   \n",
       "5    193066.0  103.245182   6.451085               0.032183   \n",
       "6    255060.0  106.221643   8.491863               0.042518   \n",
       "7    201308.0  103.667524   6.698588               0.033531   \n",
       "8    269631.0  106.864151   8.985666               0.044966   \n",
       "9    121287.0   99.145229   4.029018               0.020204   \n",
       "10   167704.0  101.858496   5.587923               0.027956   \n",
       "11   196000.0  103.374249   6.539267               0.032646   \n",
       "12   202574.0  103.718219   6.752808               0.033758   \n",
       "13   182283.0  102.706908   6.087973               0.030392   \n",
       "14   140795.0  100.315549   4.695237               0.023477   \n",
       "15   166292.0  101.828787   5.527776               0.027694   \n",
       "16   180684.0  102.587567   6.008782               0.030098   \n",
       "17   229985.0  105.043904   7.663642               0.038308   \n",
       "18   210313.0  104.014839   6.972252               0.035052   \n",
       "19   227747.0  104.938442   7.591003               0.037985   \n",
       "\n",
       "    Porportion_Waiting  Queue_Fraction     Served  Utilization    Waiting  \\\n",
       "0             0.605023        0.056967  5800878.0     0.969062  3630958.0   \n",
       "1             0.646817        0.064436  5774710.0     0.973168  3881956.0   \n",
       "2             0.670157        0.068383  5752842.0     0.975620  4018634.0   \n",
       "3             0.813777        0.104218  5620180.0     0.988155  4883966.0   \n",
       "4             0.436113        0.032952  5885866.0     0.948609  2616141.0   \n",
       "5             0.594321        0.055077  5805874.0     0.967941  3565310.0   \n",
       "6             0.687178        0.071551  5743784.0     0.977298  4122272.0   \n",
       "7             0.608254        0.057100  5802251.0     0.969689  3651696.0   \n",
       "8             0.703515        0.075430  5726720.0     0.978785  4218522.0   \n",
       "9             0.454703        0.035120  5881880.0     0.951162  2729661.0   \n",
       "10            0.548952        0.048017  5831175.0     0.962706  3293097.0   \n",
       "11            0.598098        0.055799  5807882.0     0.968350  3590908.0   \n",
       "12            0.610120        0.057570  5798236.0     0.969654  3661222.0   \n",
       "13            0.576208        0.052122  5815504.0     0.966189  3455981.0   \n",
       "14            0.495539        0.040655  5856213.0     0.956203  2971756.0   \n",
       "15            0.547950        0.047569  5838306.0     0.963010  3290221.0   \n",
       "16            0.575209        0.051582  5822574.0     0.965788  3453128.0   \n",
       "17            0.650169        0.064876  5773581.0     0.973803  3903342.0   \n",
       "18            0.618105        0.059291  5789649.0     0.970426  3708610.0   \n",
       "19            0.647772        0.064307  5767941.0     0.973474  3883840.0   \n",
       "\n",
       "    Waiting_Time_A  Waiting_Time_S  \n",
       "0         0.088570        0.066080  \n",
       "1         0.093065        0.075397  \n",
       "2         0.094898        0.080423  \n",
       "3         0.115253        0.127948  \n",
       "4         0.073232        0.037060  \n",
       "5         0.087431        0.063760  \n",
       "6         0.096304        0.084430  \n",
       "7         0.088685        0.066192  \n",
       "8         0.098725        0.089496  \n",
       "9         0.074059        0.039572  \n",
       "10        0.083116        0.055107  \n",
       "11        0.087658        0.064598  \n",
       "12        0.088679        0.066780  \n",
       "13        0.085865        0.060120  \n",
       "14        0.078205        0.046225  \n",
       "15        0.082317        0.054464  \n",
       "16        0.084180        0.059307  \n",
       "17        0.092997        0.075937  \n",
       "18        0.089837        0.068992  \n",
       "19        0.092900        0.075296  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "matrix_r"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "import scipy.stats\n",
    "compare =  [matrix_r, matrix]\n",
    "col_name = [\"Measure\",  \"Mean\", \"Distribution\"]\n",
    "Level = [\"Exponential\",  \"Lognormal\"]\n",
    "m = pd.DataFrame (columns = col_name)\n",
    "new_entry = { c : 0 for c in col_name}\n",
    "b = 0\n",
    "\n",
    "for c in compare:\n",
    "    for key in matrix.columns:\n",
    "        if key == \"Porportion_Abandonned\":\n",
    "            new_entry.update( Measure = \"Porportion Abandoned\")\n",
    "        elif key == \"Porportion_Waiting\":\n",
    "            new_entry.update( Measure = \"Porportion Waiting\")\n",
    "        elif key == \"Queue_Fraction\":\n",
    "            new_entry.update( Measure = \"Fraction Queuing (Time Weighted)\")\n",
    "        elif key == \"Waiting_Time_A\":\n",
    "            new_entry.update( Measure = \"Waiting time - A\")\n",
    "        elif key == \"Waiting_Time_S\":\n",
    "            new_entry.update( Measure = \"Waiting time - S\")\n",
    "        elif key == \"Utilization\":\n",
    "            new_entry.update( Measure = \"Server Utilization\")\n",
    "        elif key == \"Avg_People\":\n",
    "            new_entry.update( Measure = \"People (Time Weighted)\")\n",
    "        elif key == \"Avg_Queue\":\n",
    "            new_entry.update( Measure = \"Queue (Time Weighted)\")\n",
    "        elif key == \"Waiting\":\n",
    "            new_entry.update( Measure = \"Waited\")\n",
    "        else:\n",
    "            new_entry.update( Measure = key)\n",
    "        new_entry.update( Mean =  round(c[key].mean(), 3))\n",
    "        new_entry.update( Distribution = Level[b] )\n",
    "        new_entry.update( CoeffOfVar = 100*(np.sqrt(statistics.variance(c[key])))/c[key].mean())\n",
    "        intervl = scipy.stats.t.ppf(q=.975,df=19)*np.sqrt(statistics.variance(c[key]))/np.sqrt(20)\n",
    "        new_entry.update( ConfidenceInterval = \"(\"+str(round(c[key].mean() - intervl, 5))+ \",\"+ str(round(c[key].mean() + intervl, 5))+\")\")\n",
    "        m = m.append(new_entry, ignore_index = True)\n",
    "    b+=1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Measure</th>\n",
       "      <th>Mean</th>\n",
       "      <th>Distribution</th>\n",
       "      <th>CoeffOfVar</th>\n",
       "      <th>ConfidenceInterval</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Abandoned</td>\n",
       "      <td>205505.950</td>\n",
       "      <td>Exponential</td>\n",
       "      <td>28.420554</td>\n",
       "      <td>(178171.13383,232840.76617)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Abandoned</td>\n",
       "      <td>200429.850</td>\n",
       "      <td>Lognormal</td>\n",
       "      <td>29.124083</td>\n",
       "      <td>(173110.27841,227749.42159)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Fraction Queuing (Time Weighted)</td>\n",
       "      <td>0.058</td>\n",
       "      <td>Exponential</td>\n",
       "      <td>26.793618</td>\n",
       "      <td>(0.05086,0.06544)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Fraction Queuing (Time Weighted)</td>\n",
       "      <td>0.057</td>\n",
       "      <td>Lognormal</td>\n",
       "      <td>27.485957</td>\n",
       "      <td>(0.04968,0.06435)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>People (Time Weighted)</td>\n",
       "      <td>103.694</td>\n",
       "      <td>Exponential</td>\n",
       "      <td>2.743841</td>\n",
       "      <td>(102.36204,105.02522)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>People (Time Weighted)</td>\n",
       "      <td>103.596</td>\n",
       "      <td>Lognormal</td>\n",
       "      <td>2.742355</td>\n",
       "      <td>(102.2666,104.92583)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Porportion Abandoned</td>\n",
       "      <td>0.034</td>\n",
       "      <td>Exponential</td>\n",
       "      <td>28.423658</td>\n",
       "      <td>(0.02969,0.03881)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Porportion Abandoned</td>\n",
       "      <td>0.033</td>\n",
       "      <td>Lognormal</td>\n",
       "      <td>29.112713</td>\n",
       "      <td>(0.02885,0.03795)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Porportion Waiting</td>\n",
       "      <td>0.604</td>\n",
       "      <td>Exponential</td>\n",
       "      <td>14.277279</td>\n",
       "      <td>(0.56401,0.64478)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Porportion Waiting</td>\n",
       "      <td>0.613</td>\n",
       "      <td>Lognormal</td>\n",
       "      <td>14.285759</td>\n",
       "      <td>(0.57159,0.6535)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Queue (Time Weighted)</td>\n",
       "      <td>6.848</td>\n",
       "      <td>Exponential</td>\n",
       "      <td>28.436189</td>\n",
       "      <td>(5.93678,7.75956)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Queue (Time Weighted)</td>\n",
       "      <td>6.679</td>\n",
       "      <td>Lognormal</td>\n",
       "      <td>29.159559</td>\n",
       "      <td>(5.76727,7.59017)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Served</td>\n",
       "      <td>5794802.300</td>\n",
       "      <td>Exponential</td>\n",
       "      <td>1.013637</td>\n",
       "      <td>(5767311.95873,5822292.64127)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Served</td>\n",
       "      <td>5799669.750</td>\n",
       "      <td>Lognormal</td>\n",
       "      <td>0.998600</td>\n",
       "      <td>(5772564.44743,5826775.05257)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Server Utilization</td>\n",
       "      <td>0.968</td>\n",
       "      <td>Exponential</td>\n",
       "      <td>0.955152</td>\n",
       "      <td>(0.96413,0.97278)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Server Utilization</td>\n",
       "      <td>0.969</td>\n",
       "      <td>Lognormal</td>\n",
       "      <td>0.952776</td>\n",
       "      <td>(0.96485,0.9735)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Waited</td>\n",
       "      <td>3626561.050</td>\n",
       "      <td>Exponential</td>\n",
       "      <td>14.272379</td>\n",
       "      <td>(3384318.41933,3868803.68067)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Waited</td>\n",
       "      <td>3675367.100</td>\n",
       "      <td>Lognormal</td>\n",
       "      <td>14.294762</td>\n",
       "      <td>(3429479.36814,3921254.83186)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Waiting time - A</td>\n",
       "      <td>0.089</td>\n",
       "      <td>Exponential</td>\n",
       "      <td>10.414479</td>\n",
       "      <td>(0.08447,0.09313)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Waiting time - A</td>\n",
       "      <td>0.085</td>\n",
       "      <td>Lognormal</td>\n",
       "      <td>10.810055</td>\n",
       "      <td>(0.08086,0.08947)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Waiting time - S</td>\n",
       "      <td>0.068</td>\n",
       "      <td>Exponential</td>\n",
       "      <td>29.114620</td>\n",
       "      <td>(0.05861,0.07711)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Waiting time - S</td>\n",
       "      <td>0.066</td>\n",
       "      <td>Lognormal</td>\n",
       "      <td>29.833258</td>\n",
       "      <td>(0.057,0.0755)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                             Measure         Mean Distribution  CoeffOfVar  \\\n",
       "0                          Abandoned   205505.950  Exponential   28.420554   \n",
       "11                         Abandoned   200429.850    Lognormal   29.124083   \n",
       "5   Fraction Queuing (Time Weighted)        0.058  Exponential   26.793618   \n",
       "16  Fraction Queuing (Time Weighted)        0.057    Lognormal   27.485957   \n",
       "1             People (Time Weighted)      103.694  Exponential    2.743841   \n",
       "12            People (Time Weighted)      103.596    Lognormal    2.742355   \n",
       "3               Porportion Abandoned        0.034  Exponential   28.423658   \n",
       "14              Porportion Abandoned        0.033    Lognormal   29.112713   \n",
       "4                 Porportion Waiting        0.604  Exponential   14.277279   \n",
       "15                Porportion Waiting        0.613    Lognormal   14.285759   \n",
       "2              Queue (Time Weighted)        6.848  Exponential   28.436189   \n",
       "13             Queue (Time Weighted)        6.679    Lognormal   29.159559   \n",
       "6                             Served  5794802.300  Exponential    1.013637   \n",
       "17                            Served  5799669.750    Lognormal    0.998600   \n",
       "7                 Server Utilization        0.968  Exponential    0.955152   \n",
       "18                Server Utilization        0.969    Lognormal    0.952776   \n",
       "8                             Waited  3626561.050  Exponential   14.272379   \n",
       "19                            Waited  3675367.100    Lognormal   14.294762   \n",
       "9                   Waiting time - A        0.089  Exponential   10.414479   \n",
       "20                  Waiting time - A        0.085    Lognormal   10.810055   \n",
       "10                  Waiting time - S        0.068  Exponential   29.114620   \n",
       "21                  Waiting time - S        0.066    Lognormal   29.833258   \n",
       "\n",
       "               ConfidenceInterval  \n",
       "0     (178171.13383,232840.76617)  \n",
       "11    (173110.27841,227749.42159)  \n",
       "5               (0.05086,0.06544)  \n",
       "16              (0.04968,0.06435)  \n",
       "1           (102.36204,105.02522)  \n",
       "12           (102.2666,104.92583)  \n",
       "3               (0.02969,0.03881)  \n",
       "14              (0.02885,0.03795)  \n",
       "4               (0.56401,0.64478)  \n",
       "15               (0.57159,0.6535)  \n",
       "2               (5.93678,7.75956)  \n",
       "13              (5.76727,7.59017)  \n",
       "6   (5767311.95873,5822292.64127)  \n",
       "17  (5772564.44743,5826775.05257)  \n",
       "7               (0.96413,0.97278)  \n",
       "18               (0.96485,0.9735)  \n",
       "8   (3384318.41933,3868803.68067)  \n",
       "19  (3429479.36814,3921254.83186)  \n",
       "9               (0.08447,0.09313)  \n",
       "20              (0.08086,0.08947)  \n",
       "10              (0.05861,0.07711)  \n",
       "21                 (0.057,0.0755)  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m.sort_values([\"Measure\", \"Distribution\"], ascending=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-0.024817884064506017"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "100 * (228865.200 -234545.150)/228865.200"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.5384615384615399"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "100*(0.066-0.065 )/0.065"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.10969409654987732"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "100*(104.952 -104.837 )/104.837"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.6315789473684235"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "100*(0.039-0.038)/0.038"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-1.2539184952978066"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "100*(0.638 - 0.646)/0.638"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.384071260151945"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "100*(7.816 - 7.634)/7.634"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.08075214358214589"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "100*(5770571.150- 5765915.050)/ 5765915.050"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.10298661174047383"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "100*(0.972-0.971)/0.971"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.2774829674184018"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "100*(3876985.450 - 3828082.350)/3828082.350"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4.494382022471914"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "100*(0.093-0.089)/0.089"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.6315789473684235"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "100*(0.078-0.076)/0.076"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "m.sort_values([\"Measure\"], ascending=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-1.2774829674184018"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "100*(3828082.350-3876985.450)/3828082.350"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-0.10298661174047383"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "100*(0.971-0.972)/0.971"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-2.4817884064506015"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "100*(228865.200-234545.150)/228865.200"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "def comparing_dist(measure):\n",
    "    ### Add for chaning other params \n",
    "    x = [i for i in range(0,20)]\n",
    "    fig = plt.figure()\n",
    "    plt.figure(figsize=(8,5))\n",
    "    ax = plt.subplot(111)\n",
    "\n",
    "    ax.plot(x, matrix_r[measure], \"bo-\", color = \"red\", label='Exponential')\n",
    "    ax.plot(x, matrix[measure], \"bo-\", color = \"black\", alpha = 0.65, label='Lognormal')\n",
    "    \n",
    "    plt.xlabel(\"Iteration\", fontsize =  12)\n",
    "    plt.ylabel(\"Average People in the System\", fontsize =  12)\n",
    "    ax.legend(fontsize = 12)\n",
    "    plt.show "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 432x288 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "comparing_dist(\"Avg_People\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "def comparing_d(measure_1, measure_2):\n",
    "    ### Add for chaning other params \n",
    "    fig = plt.figure()\n",
    "    plt.figure(figsize=(8,5))\n",
    "    ax = plt.subplot(111)\n",
    "\n",
    "    ax.plot(matrix[measure_1], matrix_r[measure_2],\"o\", color = \"red\",label='Exponential')\n",
    "    ax.plot(matrix[measure_1], matrix[measure_2],\"o\",color = \"black\", alpha = 0.65, label='Lognormal')\n",
    "    \n",
    "    plt.xlabel(\"Utilization\", fontsize =  12)\n",
    "    plt.ylabel(\"ASA\", fontsize =  12)\n",
    "    ax.legend(fontsize = 12)\n",
    "    plt.show "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 432x288 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "comparing_d(\"Utilization\", \"Waiting_Time_S\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
